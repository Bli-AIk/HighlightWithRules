name: Build & Release IntelliJ Plugin (ensure ZIP uploaded)

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Resolve version from Gradle
        id: get_version
        run: |
          VERSION_RAW=$(./gradlew properties -q | grep "^version:" | awk '{print $2}' || true)
          if [ -z "$VERSION_RAW" ]; then
            if [ -f gradle.properties ]; then
              VERSION_RAW=$(grep "^version" gradle.properties | head -n1 | cut -d'=' -f2 | tr -d '[:space:]')
            fi
          fi
          if [ -z "$VERSION_RAW" ]; then
            VERSION_RAW=$(grep -E "version\\s*=\\s*['\"]?[0-9]+\\.[0-9]+\\.[0-9]+" -m1 build.gradle* 2>/dev/null | sed -E "s/.*version\\s*=\\s*['\"]?([^'\" ]+)['\"]?.*/\\1/")
          fi
          if [ -z "$VERSION_RAW" ]; then
            echo "Could not detect project version. Set 'version' in build.gradle(.kts) or gradle.properties."
            exit 1
          fi
          VERSION=$(echo "$VERSION_RAW" | tr -d '[:space:]')
          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build plugin (Gradle buildPlugin)
        run: ./gradlew --no-daemon clean buildPlugin

      - name: Show distributions directory (for debugging)
        run: |
          echo "Listing build/distributions:"
          ls -la build/distributions || true

      - name: Find plugin ZIP artifact
        id: find_artifact
        run: |
          ART=$(ls build/distributions/*.zip 2>/dev/null | head -n1 || true)
          if [ -z "$ART" ]; then
            echo "No plugin ZIP found under build/distributions. Build probably failed or output path is different."
            echo "Contents of build/:"
            ls -la build || true
            exit 1
          fi
          echo "Found artifact: $ART"
          # GitHub outputs must be written to GITHUB_OUTPUT
          echo "artifact=$ART" >> $GITHUB_OUTPUT

      - name: Determine tag name
        id: tag
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          if [[ "$VERSION" == v* ]]; then
            TAG="$VERSION"
          else
            TAG="v$VERSION"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Ensure tag exists (create & push if missing)
        id: ensure_tag
        run: |
          TAG=${{ steps.tag.outputs.tag }}
          if git ls-remote --tags origin "$TAG" | grep -q "$TAG"; then
            echo "created=false" >> $GITHUB_OUTPUT
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "created=true" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release and upload plugin ZIP
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          files: ${{ steps.find_artifact.outputs.artifact }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Done
        run: |
          echo "Release created/updated for ${{ steps.tag.outputs.tag }}; uploaded ${{ steps.find_artifact.outputs.artifact }}"
